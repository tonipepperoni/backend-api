# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountInfo {
  avatar: FileUpload
  createdAt: DateTime!
  email: String!
  id: String!
  username: String
}

input AuthExchangeTokenInput {
  rememberMe: Boolean!
}

input AuthLoginInput {
  password: String!
  rememberMe: Boolean!
  username: String!
}

input AuthPasswordChangeInput {
  newPassword: String!
  oldPassword: String!
}

input AuthPasswordResetConfirmationInput {
  newPassword: String!
  token: String!
}

input AuthPasswordResetRequestInput {
  id: String!
}

input AuthPasswordResetSearchRequestInput {
  emailOrUsername: String!
}

input AuthRegisterInput {
  email: String!
  password: String!
  username: String!
}

type AuthSession {
  email: String!
  expiresIn: Float!
  rememberMe: Boolean!
  roles: [String!]!
  rules: [String!]!
  token: String!
  userId: String!
  username: String!
}

type Book {
  content: JSON
  id: ID!
  title: String!
}

type BookCountAggregate {
  _all: Int!
  content: Int!
  id: Int!
  title: Int!
}

input BookCreateInput {
  content: JSON
  id: String
  title: String!
}

type BookMaxAggregate {
  id: String
  title: String
}

type BookMinAggregate {
  id: String
  title: String
}

input BookUpdateInput {
  content: JSON
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FileUpload {
  author: User
  authorId: String!
  createdAt: DateTime!
  filePathUrl: String!
  id: ID!
  thumbnailPathUrl: String
  type: String!
  updatedAt: DateTime!
}

type FileUploadCountAggregate {
  _all: Int!
  authorId: Int!
  createdAt: Int!
  filePathUrl: Int!
  id: Int!
  thumbnailPathUrl: Int!
  type: Int!
  updatedAt: Int!
}

type FileUploadMaxAggregate {
  authorId: String
  createdAt: DateTime
  filePathUrl: String
  id: String
  thumbnailPathUrl: String
  type: String
  updatedAt: DateTime
}

type FileUploadMinAggregate {
  authorId: String
  createdAt: DateTime
  filePathUrl: String
  id: String
  thumbnailPathUrl: String
  type: String
  updatedAt: DateTime
}

type FriendRequest {
  _count: FriendRequestCount!
  createdAt: DateTime!
  id: ID!
  notifications: [Notification!]
  status: String!
}

type FriendRequestAvgAggregate {
  id: Float
}

type FriendRequestCount {
  notifications: Int!
}

type FriendRequestCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  status: Int!
}

type FriendRequestMaxAggregate {
  createdAt: DateTime
  id: Int
  status: String
}

type FriendRequestMinAggregate {
  createdAt: DateTime
  id: Int
  status: String
}

type FriendRequestSumAggregate {
  id: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Message {
  _count: MessageCount!
  content: String!
  createdAt: DateTime!
  id: ID!
  notifications: [Notification!]
}

type MessageAvgAggregate {
  id: Float
}

type MessageCount {
  notifications: Int!
}

type MessageCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
}

type MessageMaxAggregate {
  content: String
  createdAt: DateTime
  id: Int
}

type MessageMinAggregate {
  content: String
  createdAt: DateTime
  id: Int
}

type MessageSumAggregate {
  id: Int
}

type Mutation {
  authPasswordChange(data: AuthPasswordChangeInput!): String!
  authPasswordResetConfirmation(data: AuthPasswordResetConfirmationInput!): AuthSession!
  authRegister(data: AuthRegisterInput!): AuthSession!
  create(data: BookCreateInput!): Book!
  delete(id: String!): Book!
  update(data: BookUpdateInput!, id: String!): Book!
}

type Notification {
  content: String!
  createdAt: DateTime!
  friendRequest: FriendRequest
  id: ID!
  message: Message
  type: String!
  typeId: Int!
  updatedAt: DateTime!
  user: User
  userId: String!
}

type NotificationAvgAggregate {
  id: Float
  typeId: Float
}

type NotificationCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  type: Int!
  typeId: Int!
  updatedAt: Int!
  userId: Int!
}

type NotificationMaxAggregate {
  content: String
  createdAt: DateTime
  id: Int
  type: String
  typeId: Int
  updatedAt: DateTime
  userId: String
}

type NotificationMinAggregate {
  content: String
  createdAt: DateTime
  id: Int
  type: String
  typeId: Int
  updatedAt: DateTime
  userId: String
}

type NotificationSumAggregate {
  id: Int
  typeId: Int
}

type Post {
  author: User!
  authorId: String!
  content: JSON
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type PostCountAggregate {
  _all: Int!
  authorId: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  published: Int!
  title: Int!
  updatedAt: Int!
}

type PostMaxAggregate {
  authorId: String
  createdAt: DateTime
  id: String
  published: Boolean
  title: String
  updatedAt: DateTime
}

type PostMinAggregate {
  authorId: String
  createdAt: DateTime
  id: String
  published: Boolean
  title: String
  updatedAt: DateTime
}

type Query {
  accountInfo: AccountInfo!
  authExchangeToken(data: AuthExchangeTokenInput!): AuthSession!
  authLogin(data: AuthLoginInput!): AuthSession!
  authPasswordResetRequest(data: AuthPasswordResetRequestInput!): Boolean!
  authPasswordResetSearchRequest(data: AuthPasswordResetSearchRequestInput!): UserSearchResponse!
  find(bookId: String!): Book!
  getAll: [Book!]!
}

input StringFieldUpdateOperationsInput {
  set: String
}

type User {
  Post: [Post!]
  _count: UserCount!
  avatar: FileUpload
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  googleId: String
  googleProfile: JSON
  id: ID!
  notifications: [Notification!]
  password: String
  roles: [String!]
  username: String
}

type UserCount {
  Post: Int!
  notifications: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerifiedAt: Int!
  googleId: Int!
  googleProfile: Int!
  id: Int!
  password: Int!
  roles: Int!
  username: Int!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  emailVerifiedAt: DateTime
  googleId: String
  id: String
  password: String
  username: String
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  emailVerifiedAt: DateTime
  googleId: String
  id: String
  password: String
  username: String
}

type UserSearchResponse {
  email: String!
  id: String!
  username: String
}