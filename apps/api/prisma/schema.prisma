datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  //output        = "../src/app/features/prisma/generated"
  //binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  //provider = "prisma-nestjs-graphql"
  output = "../src/app/features/prisma/generated"

  noAtomicOperations                    = false
  combineScalarFilters                  = false
  reExport                              = None
  emitSingle                            = true //false
  emitCompiled                          = false
  purgeOutput                           = false
  requireSingleFieldsInWhereUniqueInput = false
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  fields_Scalars_from                   = "graphql-scalars"
  fields_Scalars_input                  = true
  useInputType_WhereInput_ALL           = "WhereInput"
  decorate_1_type                       = "Create@(One|Many)UserArgs"
  decorate_1_field                      = data
  decorate_1_name                       = ValidateNested
  decorate_1_from                       = "class-validator"
  decorate_1_arguments                  = "[]"
  decorate_2_type                       = "Create@(One|Many)UserArgs"
  decorate_2_field                      = data
  decorate_2_from                       = "class-transformer"
  decorate_2_arguments                  = "['() => {propertyType.0}']"
  decorate_2_name                       = Type
  decorate_2_namedImport                = true
  decorate_3_type                       = "ProfileUncheckedCreateNestedOneWithoutUserInput"
  decorate_3_field                      = "!(create)"
  decorate_3_name                       = "HideField"
  decorate_3_from                       = "@nestjs/graphql"
  decorate_3_arguments                  = "[]"
}

model User {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  username      String?     @unique
  password      String?
  email         String      @unique
  roles         String[]
  googleId      String?     @unique
  googleProfile Json?
  Post          Post[]
  avatarId      String?
  avatar        FileUpload? @relation(fields: [avatarId], references: [id])

  @@map(name: "Users")
}

model FileUpload {
  id               String   @id @default(cuid())
  type             String
  filePathUrl      String
  thumbnailPathUrl String?
  createdAt        DateTime @default(now()) @map(name: "created_at")
  updatedAt        DateTime @default(now()) @map(name: "updated_at")
  authorId         String
  author           User[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@map(name: "Posts")
}
